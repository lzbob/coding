package com.coding.dp;

import com.coding.InterviewQuestion;

/**
 * Created by liuzhn on 2/4/15.
 */
public class DecodeWays implements InterviewQuestion {

    public void doIt() {
        //String s
        String s = "1234";
        System.out.println("Solutions: " + decode(s.toCharArray(), 0));
        System.out.println("Solutions: " + dp(s));
        System.out.println("Solutions: " + numDecodings(s));
    }

    //递归
    private int decode(char[] s, int index) {
        if(index == s.length - 1)
            if(s[index] == '0')
                //possible invalid date
                return 0;
            else
                return 1;
        if(index == s.length)
            return 0;
        int target = (s[index] - '0') * 10 + s[index + 1] - '0';
        if(target <= 26) {
            if(s[index + 1] == '0')
                return 1 + decode(s, index + 2);
            else
                return 2 + decode(s, index + 1) + decode(s, index + 2);
        }
        else
            return 1 + decode(s, index + 1);
    }

    //dp
    private int dp(String s) {
        if(s == null || s.length() == 0)
            return 0;
        if(s.charAt(0) == '0')
            return 0;
        int[] number = new int[s.length() + 1];
        number[0] = 1;
        number[1] = 1;
        int tmp;
        for(int i = 2; i <= s.length(); i++) {
            tmp = Integer.parseInt(s.substring(i - 1, i));
            //检查当前字符是不是'0'
            if (tmp != 0) {
                number[i] = number[i - 1];
            }
            //检查当前字符和前一个字符组合在一起是否在1-26之间
            if (s.charAt(i - 2) != '0') {
                tmp = Integer.parseInt(s.substring(i - 2, i));
                if (tmp > 0 && tmp <= 26) {
                    number[i] += number[i - 2];
                }
            }
        }
        return number[s.length()];
    }

    public int numDecodings(String s) {
        if(s==null || s.length()==0) {
            return 0;
        }
        if(s.charAt(0)=='0') {
            return 0;
        }

        int [] number = new int[s.length() + 1];
        number[0] = 1;
        number[1] = 1;
        int tmp;
        for(int i=2;i<=s.length();i++) {
            //检查当前字符是不是'0'
            tmp = Integer.parseInt(s.substring(i-1,i));
            if(tmp!=0) {
                number[i] = number[i-1];
            }
            //检查当前字符和前一个字符组合在一起是否在1-26之间
            if(s.charAt(i-2)!='0') {
                tmp = Integer.parseInt(s.substring(i-2,i));
                if(tmp>0&&tmp<=26) {
                    number[i] += number[i-2];
                }
            }
        }
        return number[s.length()];
    }
}
